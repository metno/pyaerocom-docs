Reading data from multiple models: the ReadGriddedMulti class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``pyaerocom.ReadGriddedMulti`` class provides an interface to import
multiple variables for an arbitrary number of gridded datasets
(e.g. model data, level 2 satellite data) and within a specific time
interval. It makes large use of the ``ReadGridded`` class that provides
an interface for importing results from a single dataset (and that does
the actual reading).

**Note**: This is not strictly relevant for the following tutorials. You
might skip this tutorial if it is not of particular interest for you to
read multiple models at once.

.. code:: ipython3

    import pyaerocom as pya


.. parsed-literal::

    Initating pyaerocom configuration
    Checking database access...
    Checking access to: /lustre/storeA
    Access to lustre database: True
    Init data paths for lustre
    Expired time: 0.023 s


Let’s find some NorESM models

.. code:: ipython3

    pya.browse_database('*Noresm*')


.. parsed-literal::

    Found more than 20 matches for input pattern *Noresm*:
    
    Matches: ['NorESM_SVN_TEST', 'NORESM.T2.1_CTL.v3', 'eclipse.NorESM2.Test92f19_f19_0003_0004', 'NorESM.T4.3_rf_voc_europe', 'NorESM.T4.3_rf_voc_ship', 'NorESM.T4.3_rf_co_europe', 'NorESM.T4.3_rf_nox_china', 'eclipse.NorESM2.Test111f19_f19_0002_0004', 'NorESM.T4.3_rf_co_ship', 'NorESM.T4.3_rf_co_china', 'NorESM.T4.3_rf_voc_rotw', 'NORESM.T2.1_CTL', 'hiatus.NorESM1.model1.i1.pd', 'NorESM.T4.3_rf_voc_china', 'NorESM.T4.3_rf_control', 'hiatus.NorESM1.model2c.i1.pd', 'eclipse.NorESM2.Test120f19_f19_0002_0004', 'NorESM.T4.3_rf_nox_europe', 'eclipse.NorESM2.Test112f19_f19_0002_0004', 'NorESM.T4.3_rf_ch4_world', 'NORESM.T2.1_CTL.v3bis.r3', 'hiatus.NorESM1.model2m.i1.pd', 'eclipse.NorESM2.Test116f19_f19_0002_0004', 'NORESM.T2.1_CTL.v3bis', 'eclipse.NorESM1.T6.4.cle_2006_2015', 'NORESM.T2.1_CTL.v3bis.r2', 'eclipse.NorESM2.Test121f19_f19_0002_0004', 'NorESM.T4.3_rf_co_rotw', 'eclipse.NorESM2.Test91f19_f19_0003_0004', 'eclipse.NorESM2.Test114f19_f19_0002_0004', 'NorESM.T4.3_rf_nox_rotw', 'NorESM.T4.3_rf_all_ship', 'NorESM.T4.3_rf_nox_ship', 'eclipse.NorESM2.Test111f19_f19_0003_0008', 'eclipse.NorESM2.Test113f19_f19_0002_0004', 'NORESM.T2.1_CTL.v2', 'eclipse.NorESM2.Test122f19_f19_0002_0004', 'NORESM.T4.3', 'NorESM2-CPL_HIST']
    
    To receive more detailed information, please specify search ID more accurately


From the output, select some model runs to read and put in list:

.. code:: ipython3

    models = ['NORESM.T2.1_CTL.v3', 'NORESM.T2.1_CTL.v2']

Now create and initiate ``ReadGriddedMulti`` class. The directory for
each model as well as all valid files in the model directories are
searched on initiation of the instance. Valid here means, that the files
belong to the corresponding model. Subsetting of the time interval is
done in a later process.

.. code:: ipython3

    read = pya.io.ReadGriddedMulti(models)
    print(read)


.. parsed-literal::

    ReadGriddedMulti class is deprecated and will not be further developed. Please use ReadGridded.


.. parsed-literal::

    
    Pyaerocom ReadGriddedMulti
    --------------------------
    Data-IDs: ['NORESM.T2.1_CTL.v3', 'NORESM.T2.1_CTL.v2']
    


As you can see, the 3 different instances of the ``ReadGridded`` class
were created (which was introduced in the previous tutorial), one for
each of the 3 requested datasets. These can be used to access the data
for each of the datasets.

Let’s define a bunch of test variables that are supposed to be loaded
for each model.

.. code:: ipython3

    test_var = "od550aer"

Read AOD for all input models:

.. code:: ipython3

    result_dict = read.read(test_var, start=2008)

.. code:: ipython3

    result_dict




.. parsed-literal::

    {'NORESM.T2.1_CTL.v3': {'od550aer': pyaerocom.GriddedData
      Grid data: <iris 'Cube' of Aerosol optical depth at 550nm / (1) (time: 12; latitude: 96; longitude: 144)>},
     'NORESM.T2.1_CTL.v2': {'od550aer': pyaerocom.GriddedData
      Grid data: <iris 'Cube' of Aerosol optical depth at 550nm / (1) (time: 12; latitude: 96; longitude: 144)>}}



Compare maps:

.. code:: ipython3

    for model, data in result_dict.items():
        if test_var in data:
            ax = data[test_var].resample_time('yearly').quickplot_map()




.. image:: tut03_intro_class_ReadGriddedMulti/tut03_intro_class_ReadGriddedMulti_14_0.png



.. image:: tut03_intro_class_ReadGriddedMulti/tut03_intro_class_ReadGriddedMulti_14_1.png


.. code:: ipython3

    data[test_var].max()




.. parsed-literal::

    1.6088489




