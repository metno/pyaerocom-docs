Colocation of model data with observations
------------------------------------------

This notebook gives an introduction into collocation of gridded data
with observations. Here, the 550 nm AODs of the ECMWF CAMS reanalysis
model are compared with global daily AeroNet Sun V2 (Level 2) data for
the year 2010. The collocated data will be analysed and visualised in
monthly resolution. The analysis results will be plotted in the form of
the well known Aerocom loglog scatter plots as can be found in the
online interface (see e.g.
`here <http://aerocom.met.no/cgi-bin/aerocom/surfobs_annualrs.pl>`__).

Import setup and imports
~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    import pyaerocom as pya
    pya.change_verbosity('critical')
    
    YEAR = 2010
    VAR = "od550aer"
    TS_TYPE = "daily"
    MODEL_ID = "ECMWF_CAMS_REAN"
    OBS_ID = 'AeronetSunV3Lev2.daily'

Import of model data
~~~~~~~~~~~~~~~~~~~~

Create reader instance for model data and print overview of what is in
there.

.. code:: ipython3

    model_reader = pya.io.ReadGridded(MODEL_ID)
    print(model_reader)


.. parsed-literal::

    
    Pyaerocom ReadGridded
    ---------------------
    Data ID: ECMWF_CAMS_REAN
    Data directory: /lustre/storeA/project/aerocom/aerocom-users-database/ECMWF/ECMWF_CAMS_REAN/renamed
    Available experiments: ['', 'REAN']
    Available years: [2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 9999]
    Available frequencies ['daily' 'monthly']
    Available variables: ['ang4487aer', 'bscatc532aerboa', 'bscatc532aertoa', 'ec532aer', 'ec532dryaer', 'od440aer', 'od550aer', 'od550bc', 'od550dust', 'od550oa', 'od550so4', 'od550ss', 'od865aer', 'sconcbc', 'sconcdust', 'sconcoa', 'sconcpm10', 'sconcpm25', 'sconcso4', 'sconcss', 'time', 'z']


Since we are only interested in a single year we can use the method

.. code:: ipython3

    model_data = model_reader.read_var(VAR, start=YEAR)
    #model_data = read_result[VAR][YEAR]
    print(model_data)


.. parsed-literal::

    Deactivating file search by vertical code for ECMWF_CAMS_REAN, since filenames do not include information about vertical code (probably AeroCom 2 convention)


.. parsed-literal::

    pyaerocom.GriddedData: ECMWF_CAMS_REAN
    Grid data: Aerosol optical depth at 550 nm / (1) (time: 365; latitude: 161; longitude: 320)
         Dimension coordinates:
              time                             x              -               -
              latitude                         -              x               -
              longitude                        -              -               x
         Attributes:
              Conventions: CF-1.6
              NCO: "4.5.4"
              computed: False
              concatenated: False
              data_id: ECMWF_CAMS_REAN
              from_files: ['/lustre/storeA/project/aerocom/aerocom-users-database/ECMWF/ECMWF_CA...
              history: Sat May 26 21:08:48 2018: ncecat -O -u time -n 365,3,1 CAMS_REAN_001.nc...
              nco_openmp_thread_number: 1
              outliers_removed: False
              reader: None
              region: None
              regridded: False
              ts_type: daily
              var_name_read: n/d
         Cell methods:
              mean: step
              mean: time


.. code:: ipython3

    fig = model_data.quickplot_map(time_idx=0)



.. image:: tut07_intro_colocation/tut07_intro_colocation_7_0.png


Import of AeroNet Sun V3 data (Level 2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Import Aeronet data and apply filter that selects only stations that are
located at altitudes between 0 and 1000 m.

.. code:: ipython3

    obs_reader = pya.io.ReadUngridded(OBS_ID, [VAR, 'ang4487aer'])
    obs_data = obs_reader.read().filter_by_meta(altitude=[0, 1000])
    print(obs_data)


.. parsed-literal::

    
    Pyaerocom UngriddedData
    -----------------------
    Contains networks: ['AeronetSunV3Lev2.daily']
    Contains variables: ['od550aer', 'ang4487aer']
    Contains instruments: ['sun_photometer']
    Total no. of meta-blocks: 2068
    Filters that were applied:
     Filter time log: 20200121141437
    	altitude: [0, 1000]


Plot station coordinates
^^^^^^^^^^^^^^^^^^^^^^^^

First, plot all stations that are available at all times (as red dots),
then (on top of that in green), plot all stations that provide AODs in
2010.

.. code:: ipython3

    ax = obs_data.plot_station_coordinates(color='r', markersize=20,
                                           label='All stations')
    ax = obs_data.plot_station_coordinates(var_name='od550aer', start=2010, 
                                           filter_name='WORLD-noMOUNTAINS',
                                           color='lime', markersize=8, legend=True,
                                           title='Aeronet V3 stations',
                                           ax=ax) #just pass the GeoAxes instance that was created in the first call


.. parsed-literal::

    Input filters {'longitude': [-180, 180], 'latitude': [-90, 90], 'altitude': [-1000000.0, 1000.0]} result in unchanged data object



.. image:: tut07_intro_colocation/tut07_intro_colocation_11_1.png


Perform colocation and plot corresponding scatter plots with statistical values
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2010 monthly World no mountains
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Colocate 2010 data in monthly resolution using (cf.Â green dots in
station plot above).

.. code:: ipython3

    obs_data




.. parsed-literal::

    UngriddedData <networks: ['AeronetSunV3Lev2.daily']; vars: ['od550aer', 'ang4487aer']; instruments: ['sun_photometer'];No. of stations: 2068



.. code:: ipython3

    data_coloc = pya.colocation.colocate_gridded_ungridded(model_data, obs_data, ts_type='monthly',
                                                           filter_name='WORLD-noMOUNTAINS')
    data_coloc


.. parsed-literal::

    Input filters {'longitude': [-180, 180], 'latitude': [-90, 90], 'altitude': [-1000000.0, 1000.0]} result in unchanged data object
    Applying regional cropping in GriddedData using Filter class. Note that this does not yet include potential cropping in the vertical dimension. Coming soon...
    Setting od550aer outlier lower lim: -1.00
    Setting od550aer outlier upper lim: 10.00
    Extracting timeseries data from large array (shape: (365, 161, 320)). This may take a while...
    Time series extraction successful. Elapsed time: 10 s




.. parsed-literal::

    <xarray.DataArray 'od550aer' (data_source: 2, time: 12, station_name: 266)>
    array([[[       nan, 0.11758773,        nan, ...,        nan,
                    nan, 0.22213848],
            [       nan, 0.13212825,        nan, ...,        nan,
                    nan, 0.4297616 ],
            [       nan, 0.14685542,        nan, ...,        nan,
                    nan, 0.91985307],
            ...,
            [0.11797653, 0.11601176,        nan, ...,        nan,
                    nan, 0.37093354],
            [0.13223569, 0.19505731,        nan, ...,        nan,
                    nan, 0.26176478],
            [       nan,        nan,        nan, ...,        nan,
                    nan, 0.37904951]],
    
           [[0.18994787, 0.14006206, 0.20283099, ..., 0.38737348,
             0.0793535 , 0.20433735],
            [0.15040805, 0.19008887, 0.26136985, ..., 0.4286426 ,
             0.10622032, 0.25780594],
            [0.10702838, 0.22197406, 0.56994721, ..., 0.55542935,
             0.11989709, 0.53931567],
            ...,
            [0.1369915 , 0.18943009, 0.44513801, ..., 0.32898009,
             0.10021837, 0.35230389],
            [0.15984387, 0.17856415, 0.30946554, ..., 0.41468468,
             0.05409064, 0.2393932 ],
            [0.1471722 , 0.13803888, 0.20964891, ..., 0.31348388,
             0.07791582, 0.19986016]]])
    Coordinates:
      * time          (time) datetime64[ns] 2010-01-15 2010-02-15 ... 2010-12-15
      * data_source   (data_source) <U22 'AeronetSunV3Lev2.daily' 'ECMWF_CAMS_REAN'
        var_name      (data_source) <U8 'od550aer' 'od550aer'
        var_units     (data_source) <U1 '1' '1'
        ts_type_src   (data_source) <U5 'daily' 'daily'
      * station_name  (station_name) <U19 'ARM_Darwin' ... 'Zinder_Airport'
        latitude      (station_name) float64 -12.43 37.97 15.35 ... 32.64 13.78
        longitude     (station_name) float64 130.9 23.72 -1.479 ... -114.6 8.99
        altitude      (station_name) float64 29.9 130.0 305.0 ... 20.0 63.0 456.0
    Attributes:
        data_source:        ['AeronetSunV3Lev2.daily', 'ECMWF_CAMS_REAN']
        var_name:           ['od550aer', 'od550aer']
        ts_type:            monthly
        filter_name:        WORLD-noMOUNTAINS
        ts_type_src:        ['daily', 'daily']
        start_str:          20100101
        stop_str:           20101231
        var_units:          ['1', '1']
        vert_scheme:        None
        data_level:         3
        revision_ref:       20190920
        from_files:         ['aerocom.ECMWF_CAMS_REAN.daily.od550aer.2010.nc']
        from_files_ref:     None
        stations_ignored:   None
        colocate_time:      False
        obs_is_clim:        False
        pyaerocom:          0.9.0.dev1
        apply_constraints:  True
        min_num_obs:        {'yearly': {'monthly': 3}, 'monthly': {'daily': 7}, '...
        outliers_removed:   True
        region:             WORLD
        lon_range:          [-180, 180]
        lat_range:          [-90, 90]
        alt_range:          [-1000000.0, 1000.0]
        land_sea:           None



.. code:: ipython3

    data_coloc.plot_scatter(marker='o', mec='none', color='b', alpha=0.05);



.. image:: tut07_intro_colocation/tut07_intro_colocation_16_0.png


Time colocation
^^^^^^^^^^^^^^^

The above colocation was performed based on monthly means, both from
model and obs, at each station. However, if you look closely in the
output you can see that both datasets are provided in daily resolution.
You may colocate on a daily basis using the input argument
``colocate_time``, in which case the model monthly means correspond to
the mean value from the days where there were observations. This can
(and most likely will) give you different results, since the
observations may miss some days in the month, which is disregarded in
the above monthly colocation routine:

.. code:: ipython3

    data_coloc_alt = pya.colocation.colocate_gridded_ungridded(model_data, obs_data, ts_type='monthly',
                                                               filter_name='WORLD-noMOUNTAINS',
                                                               colocate_time=True)


.. parsed-literal::

    Input filters {'longitude': [-180, 180], 'latitude': [-90, 90], 'altitude': [-1000000.0, 1000.0]} result in unchanged data object
    Applying regional cropping in GriddedData using Filter class. Note that this does not yet include potential cropping in the vertical dimension. Coming soon...
    Setting od550aer outlier lower lim: -1.00
    Setting od550aer outlier upper lim: 10.00
    Extracting timeseries data from large array (shape: (365, 161, 320)). This may take a while...
    Time series extraction successful. Elapsed time: 10 s


.. code:: ipython3

    data_coloc_alt.plot_scatter(marker='o', mec='none', color='b', alpha=0.05);



.. image:: tut07_intro_colocation/tut07_intro_colocation_19_0.png


The result shows, that time colocation yields better results, with lower
biases (NMB and MNMB) and higher correlation, etc.

However, in reality and in particular in large model intercomparison
studies (involving many variables and model outputs) the model
diagnostics output files are submitted in monthly resolution, which does
not allow to perform these time colocation on a daily basis.

Note also, that the model data used here is the CAMS reanalysis dataset
which assimilates AERONET AODs. It is therefore not surprising, that the
results look so shiny.

2010 daily Europe no mountains
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now perform colocation only over Europe. Starting with a station plot.

.. code:: ipython3

    obs_data.plot_station_coordinates(var_name='od550aer', start=2010, 
                                      filter_name='EUROPE-noMOUNTAINS',
                                      color='lime', markersize=20, legend=True,
                                      title='Aeronet V3 stations');



.. image:: tut07_intro_colocation/tut07_intro_colocation_22_0.png


.. code:: ipython3

    data_coloc_eur = pya.colocation.colocate_gridded_ungridded(model_data, obs_data, ts_type='daily',
                                                           filter_name='EUROPE-noMOUNTAINS')
    data_coloc_eur


.. parsed-literal::

    Applying regional cropping in GriddedData using Filter class. Note that this does not yet include potential cropping in the vertical dimension. Coming soon...
    Setting od550aer outlier lower lim: -1.00
    Setting od550aer outlier upper lim: 10.00




.. parsed-literal::

    <xarray.DataArray 'od550aer' (data_source: 2, time: 365, station_name: 57)>
    array([[[       nan, 0.07779863,        nan, ...,        nan,
                    nan,        nan],
            [       nan, 0.08462509,        nan, ...,        nan,
                    nan,        nan],
            [       nan,        nan,        nan, ...,        nan,
                    nan,        nan],
            ...,
            [       nan,        nan,        nan, ...,        nan,
                    nan,        nan],
            [       nan,        nan,        nan, ...,        nan,
                    nan,        nan],
            [       nan,        nan,        nan, ...,        nan,
                    nan,        nan]],
    
           [[0.01515078, 0.07244745, 0.07869708, ..., 0.11039524,
             0.07609723, 0.07544727],
            [0.04307415, 0.04304916, 0.02650012, ..., 0.02117543,
             0.08302183, 0.10367063],
            [0.12401945, 0.10402061, 0.05529844, ..., 0.04807386,
             0.06329798, 0.1093953 ],
            ...,
            [0.04821868, 0.12015115, 0.08478204, ..., 0.08460208,
             0.21631196, 0.07347766],
            [0.18640689, 0.122147  , 0.11257673, ..., 0.16311105,
             0.13137373, 0.05379725],
            [0.12209792, 0.13512004, 0.11092443, ..., 0.14169654,
             0.08777581, 0.02706592]]])
    Coordinates:
      * data_source   (data_source) <U22 'AeronetSunV3Lev2.daily' 'ECMWF_CAMS_REAN'
        var_name      (data_source) <U8 'od550aer' 'od550aer'
        var_units     (data_source) <U1 '1' '1'
        ts_type_src   (data_source) <U5 'daily' 'daily'
      * time          (time) datetime64[ns] 2010-01-01 2010-01-02 ... 2010-12-31
      * station_name  (station_name) <U17 'Andenes' 'Arcachon' ... 'Xanthi'
        latitude      (station_name) float64 69.28 44.66 45.76 ... 43.68 51.77 41.15
        longitude     (station_name) float64 16.01 -1.163 3.111 ... -1.332 24.92
        altitude      (station_name) float64 379.0 11.0 423.0 ... 130.0 160.0 54.0
    Attributes:
        data_source:        ['AeronetSunV3Lev2.daily', 'ECMWF_CAMS_REAN']
        var_name:           ['od550aer', 'od550aer']
        ts_type:            daily
        filter_name:        EUROPE-noMOUNTAINS
        ts_type_src:        ['daily', 'daily']
        start_str:          20100101
        stop_str:           20101231
        var_units:          ['1', '1']
        vert_scheme:        None
        data_level:         3
        revision_ref:       20190920
        from_files:         ['aerocom.ECMWF_CAMS_REAN.daily.od550aer.2010.nc']
        from_files_ref:     None
        stations_ignored:   None
        colocate_time:      False
        obs_is_clim:        False
        pyaerocom:          0.9.0.dev1
        apply_constraints:  None
        min_num_obs:        None
        outliers_removed:   True
        region:             EUROPE
        lon_range:          [-10, 40]
        lat_range:          [40, 72]
        alt_range:          [-1000000.0, 1000.0]
        land_sea:           None



.. code:: ipython3

    data_coloc_eur.plot_scatter(marker='o', mec='none', color='b', alpha=0.05);



.. image:: tut07_intro_colocation/tut07_intro_colocation_24_0.png


Satellite colocation
~~~~~~~~~~~~~~~~~~~~

Below, the same is done for satellite colocation using AODs from the
MODIS instrument onboard the Aqua satellite (Collection 6).

.. code:: ipython3

    pya.browse_database('MODIS6*aqua')


.. parsed-literal::

    
    Pyaerocom ReadGridded
    ---------------------
    Data ID: MODIS6.1aqua
    Data directory: /lustre/storeA/project/aerocom/aerocom-users-database/SATELLITE-DATA/MODIS6.1aqua/renamed
    Available experiments: ['MODIS6.1aqua']
    Available years: [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]
    Available frequencies ['daily']
    Available variables: ['od550aer']
    
    Pyaerocom ReadGridded
    ---------------------
    Data ID: MODIS6.aqua
    Data directory: /lustre/storeA/project/aerocom/aerocom-users-database/SATELLITE-DATA/MODIS6.aqua/renamed
    Available experiments: ['MODIS6.aqua']
    Available years: [2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014]
    Available frequencies ['daily']
    Available variables: ['od550aer']


.. code:: ipython3

    modis_aods = pya.io.ReadGridded('MODIS6.aqua').read_var('od550aer', start=2010)
    modis_aods


.. parsed-literal::

    Deactivating file search by vertical code for MODIS6.aqua, since filenames do not include information about vertical code (probably AeroCom 2 convention)
    Overwriting unit unknown in cube od550aer with value "1"




.. parsed-literal::

    pyaerocom.GriddedData
    Grid data: <iris 'Cube' of Aerosol Optical Thickness at 0.55 microns for both Ocean (best) and Land (corrected): Mean / (1) (time: 365; latitude: 180; longitude: 360)>



Now the satellite data comes gridded, like the model data. Thus, we use
the gridded / gridded colocation routine rather than the gridded /
ungridded that we used above when using AERONET station data.

No (daily) time colocation
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    coldata_modis =  pya.colocation.colocate_gridded_gridded(model_data,
                                                             modis_aods, 
                                                             ts_type='monthly',
                                                             regrid_res_deg=5,
                                                             remove_outliers=True,
                                                             colocate_time=False)


.. parsed-literal::

    Applying regional cropping in GriddedData using Filter class. Note that this does not yet include potential cropping in the vertical dimension. Coming soon...
    Applying regional cropping in GriddedData using Filter class. Note that this does not yet include potential cropping in the vertical dimension. Coming soon...
    Setting od550aer outlier lower lim: -1.00
    Setting od550aer outlier upper lim: 10.00


.. code:: ipython3

    coldata_modis.plot_scatter(marker='o', mec='none', color='b', alpha=0.01);



.. image:: tut07_intro_colocation/tut07_intro_colocation_31_0.png


With (daily) time colocation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    coldata_modis_alt =  pya.colocation.colocate_gridded_gridded(model_data,
                                                             modis_aods, 
                                                             ts_type='monthly',
                                                             regrid_res_deg=5,
                                                             remove_outliers=True,
                                                             colocate_time=True)


.. parsed-literal::

    Applying regional cropping in GriddedData using Filter class. Note that this does not yet include potential cropping in the vertical dimension. Coming soon...
    Applying regional cropping in GriddedData using Filter class. Note that this does not yet include potential cropping in the vertical dimension. Coming soon...
    Setting od550aer outlier lower lim: -1.00
    Setting od550aer outlier upper lim: 10.00


.. code:: ipython3

    coldata_modis_alt.plot_scatter(marker='o', mec='none', color='b', alpha=0.01);



.. image:: tut07_intro_colocation/tut07_intro_colocation_34_0.png

